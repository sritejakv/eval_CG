package adapter;

import com.paypal.digraph.parser.GraphNode;
import com.paypal.digraph.parser.GraphParser;
import metrics.Metrics;
import probe.CallGraph;
import probe.PyanToProbeConverter;
import reports.CSVReporter;
import utils.Constants;
import utils.DotfileReader;
import utils.ResourceReader;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.*;
import java.util.List;

/**
 * Class to get call graph generated by pyan. Extends FrameworkAdapter to facilitate comparison of call graphs.
 */
public class Pyan extends FrameworkAdapter {

    private PyanToProbeConverter pyanToProbeConverter;
    private String reportsDir;

    public Pyan(String rDir){
        super(Constants.PYAN_FRAMEWORK, Constants.PYAN_CALL_GRAPH);
        this.pyanToProbeConverter = new PyanToProbeConverter();
        this.reportsDir = rDir;
    }

    @Override
    public ArrayList<CallGraph> getStaticCallGraph(String fileName) throws FileNotFoundException {
        InputStream fileInputStream = new FileInputStream(ResourceReader.getResource(Constants.PYAN_STATIC_CG_PATH,
                fileName));
        return pyanToProbeConverter.getProbeCG(fileInputStream);
    }

    @Override
    public void writeToCSV(Map<String, List<Metrics>> metricsMap) {
        new CSVReporter(Constants.PYAN_CSV_NAME, reportsDir).writeToFile(metricsMap);
    }

    @Override
    public Double getRunTime(String fileName) throws FileNotFoundException {
        InputStream fileInputStream = new FileInputStream(ResourceReader.getResource(Constants.PYAN_STATIC_CG_PATH,
                fileName));
        GraphParser p = DotfileReader.parseDotFile(fileInputStream);
        Map<String, GraphNode> nodeMap = p.getNodes();
        GraphNode runTimeNode = nodeMap.get(Constants.PYAN_RUN_TIME_NODE);
        String runTime = (String) runTimeNode.getAttribute("label");
        return Double.valueOf(runTime);
    }
}
